{"ast":null,"code":"var _jsxFileName = \"D:\\\\trae\\\\llm_fe\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatHistory from './ChatHistory';\nimport ChatInput from './ChatInput';\nimport { sendMessage, getChatHistory } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  max-width: 1000px;\n  margin: 0 auto;\n  background-color: #ffffff;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n`;\n_c = ChatContainer;\nconst Header = styled.div`\n  padding: 16px;\n  background-color: #4a7dff;\n  color: white;\n  font-size: 20px;\n  font-weight: bold;\n  text-align: center;\n`;\n_c2 = Header;\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentResponse, setCurrentResponse] = useState('');\n\n  // 加载聊天历史\n  useEffect(() => {\n    const loadChatHistory = async () => {\n      try {\n        const history = await getChatHistory();\n        if (history && history.length > 0) {\n          setMessages(history);\n        }\n      } catch (error) {\n        console.error('Failed to load chat history:', error);\n      }\n    };\n    loadChatHistory();\n  }, []);\n  const handleSendMessage = async message => {\n    // 添加用户消息到聊天历史\n    const userMessage = {\n      role: 'user',\n      content: message\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // 创建一个空的 AI 响应消息\n    setCurrentResponse('');\n    const aiMessage = {\n      role: 'assistant',\n      content: ''\n    };\n    setMessages(prev => [...prev, aiMessage]);\n    setIsLoading(true);\n    try {\n      // 处理流式响应\n      await sendMessage(message, chunk => {\n        // 更新当前响应\n        setCurrentResponse(prev => prev + chunk);\n\n        // 更新消息列表中的 AI 响应\n        setMessages(prev => {\n          const newMessages = [...prev];\n          newMessages[newMessages.length - 1].content += chunk;\n          return newMessages;\n        });\n      });\n    } catch (error) {\n      console.error('Error in chat:', error);\n      // 在消息中显示错误\n      setMessages(prev => {\n        const newMessages = [...prev];\n        newMessages[newMessages.length - 1].content = 'Sorry, please try again later.';\n        return newMessages;\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: \"AI Chat Assistant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatHistory, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSendMessage: handleSendMessage,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"T+zaKnYuIr070cU5rcFZZpE+x9Y=\");\n_c3 = Chat;\nexport default Chat;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ChatContainer\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","styled","ChatHistory","ChatInput","sendMessage","getChatHistory","jsxDEV","_jsxDEV","ChatContainer","div","_c","Header","_c2","Chat","_s","messages","setMessages","isLoading","setIsLoading","currentResponse","setCurrentResponse","loadChatHistory","history","length","error","console","handleSendMessage","message","userMessage","role","content","prev","aiMessage","chunk","newMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c3","$RefreshReg$"],"sources":["D:/trae/llm_fe/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport ChatHistory from './ChatHistory';\r\nimport ChatInput from './ChatInput';\r\nimport { sendMessage, getChatHistory } from '../services/api';\r\n\r\nconst ChatContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n  background-color: #ffffff;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst Header = styled.div`\r\n  padding: 16px;\r\n  background-color: #4a7dff;\r\n  color: white;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n`;\r\n\r\nconst Chat = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [currentResponse, setCurrentResponse] = useState('');\r\n\r\n  // 加载聊天历史\r\n  useEffect(() => {\r\n    const loadChatHistory = async () => {\r\n      try {\r\n        const history = await getChatHistory();\r\n        if (history && history.length > 0) {\r\n          setMessages(history);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to load chat history:', error);\r\n      }\r\n    };\r\n\r\n    loadChatHistory();\r\n  }, []);\r\n\r\n  const handleSendMessage = async (message) => {\r\n    // 添加用户消息到聊天历史\r\n    const userMessage = { role: 'user', content: message };\r\n    setMessages(prev => [...prev, userMessage]);\r\n    \r\n    // 创建一个空的 AI 响应消息\r\n    setCurrentResponse('');\r\n    const aiMessage = { role: 'assistant', content: '' };\r\n    setMessages(prev => [...prev, aiMessage]);\r\n    \r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // 处理流式响应\r\n      await sendMessage(message, (chunk) => {\r\n        // 更新当前响应\r\n        setCurrentResponse(prev => prev + chunk);\r\n        \r\n        // 更新消息列表中的 AI 响应\r\n        setMessages(prev => {\r\n          const newMessages = [...prev];\r\n          newMessages[newMessages.length - 1].content += chunk;\r\n          return newMessages;\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Error in chat:', error);\r\n      // 在消息中显示错误\r\n      setMessages(prev => {\r\n        const newMessages = [...prev];\r\n        newMessages[newMessages.length - 1].content = 'Sorry, please try again later.';\r\n        return newMessages;\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatContainer>\r\n      <Header>AI Chat Assistant</Header>\r\n      <ChatHistory messages={messages} />\r\n      <ChatInput onSendMessage={handleSendMessage} isLoading={isLoading} />\r\n    </ChatContainer>\r\n  );\r\n};\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}