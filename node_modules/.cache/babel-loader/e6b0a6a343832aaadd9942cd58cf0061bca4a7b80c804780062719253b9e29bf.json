{"ast":null,"code":"import axios from 'axios';\n\n// 后端 API 的基础 URL，根据您的实际情况修改\nconst API_BASE_URL = 'http://localhost:8080/api';\n\n// 创建 axios 实例\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 发送消息并接收流式响应\nexport const sendMessage = async (message, onChunkReceived) => {\n  try {\n    // 使用 axios 发送请求并接收流式响应\n    const response = await apiClient.post('/chat', {\n      message\n    }, {\n      responseType: 'stream',\n      onDownloadProgress: progressEvent => {\n        // 处理流式数据\n        const chunk = progressEvent.currentTarget.response;\n        if (chunk) {\n          onChunkReceived(chunk);\n        }\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\n\n// 获取聊天历史\nexport const getChatHistory = async () => {\n  try {\n    const response = await apiClient.get('/history');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching chat history:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","sendMessage","message","onChunkReceived","response","post","responseType","onDownloadProgress","progressEvent","chunk","currentTarget","data","error","console","getChatHistory","get"],"sources":["D:/trae/llm_fe/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// 后端 API 的基础 URL，根据您的实际情况修改\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\n// 创建 axios 实例\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 发送消息并接收流式响应\r\nexport const sendMessage = async (message, onChunkReceived) => {\r\n  try {\r\n    // 使用 axios 发送请求并接收流式响应\r\n    const response = await apiClient.post('/chat', { message }, {\r\n      responseType: 'stream',\r\n      onDownloadProgress: (progressEvent) => {\r\n        // 处理流式数据\r\n        const chunk = progressEvent.currentTarget.response;\r\n        if (chunk) {\r\n          onChunkReceived(chunk);\r\n        }\r\n      }\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error sending message:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 获取聊天历史\r\nexport const getChatHistory = async () => {\r\n  try {\r\n    const response = await apiClient.get('/history');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching chat history:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,OAAO,EAAEC,eAAe,KAAK;EAC7D,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMP,SAAS,CAACQ,IAAI,CAAC,OAAO,EAAE;MAAEH;IAAQ,CAAC,EAAE;MAC1DI,YAAY,EAAE,QAAQ;MACtBC,kBAAkB,EAAGC,aAAa,IAAK;QACrC;QACA,MAAMC,KAAK,GAAGD,aAAa,CAACE,aAAa,CAACN,QAAQ;QAClD,IAAIK,KAAK,EAAE;UACTN,eAAe,CAACM,KAAK,CAAC;QACxB;MACF;IACF,CAAC,CAAC;IAEF,OAAOL,QAAQ,CAACO,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMP,SAAS,CAACkB,GAAG,CAAC,UAAU,CAAC;IAChD,OAAOX,QAAQ,CAACO,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}